#!/bin/bash
## 
## Created By: Gabriel Gonzalez
## 
## 
## Name:
## 	
##     compinfo
## 
## 
## Syntax: 
## 	
##     compinfo 
##             [ -h ]
##             [ bat [NULL] [stat] ] 
##             [ bright [stat] [stat-val] [VALUE] ] 
##             [cpu [NULL] ] 
##             [mem [NULL] ] 
##             [ net [NULL] [ssid] ] 
##             [temp [NULL] ] 
##             [up [NULL] ] 
##             [ vol [stat] [muteStat] [unmute] [VALUE] ]
## 
## 
## Purpose:
## 	
##     Displays a wide variety of computer information on the Arch Linux 
##     operating system. 
##     
##     * Verified on a Dell Inspiron 14R running Arch Kernel release 3.13.5-1.
## 
## 
## Keywords:
##     
##     -h     - show the help screen
##     bat    - displays the current battery percentage, the option 'stat' is 
##              used to show whether or not the charger is plugged in 
##              (can be run with no arguments) 
##     bright - prints the current brightness percentage with 'stat', the current
##              brightness value with 'stat-val', or changes the brightness to VALUE
##              where VALUE is a number from 1 - 100
##              (cannot be run without arguments)
##     cpu    - displays the current cpu frequency as a percentage for each cpu
##              (run with no arguments)
##     mem    - shows the current memory usage  out of the total amount of memory (Mb)
##              (run with no arguments)
##     net    - displays the current network strength as a percentgage, with the 
##              option 'ssid', prints the ssid of the network that the computer is
##              connected to
##              (can be run with no arguments)
##     temp   - prints the current temperature of the computer (degrees Celcius)
##              (run with no arguments)
##     up     - prints the current "uptime" of the computer
##              (run with no arguments)
##     vol    - displays the current volume setting as a percentage with the option
##              'stat', shows the status of mute (whether it's toggled or not) with
##              'muteStat', unmutes the sound card with 'unmute', or changes the 
##              volume to the VALUE specified where VALUE is a number from 0 - 100
## 
## 
## Functions:
## 	
##     N/A
## 
## 
## Dependencies:
##
##     mpstat  - installed command, installed with 'sudo pacman -S sysstat'
##     sensors - installed command, installed with 'sudo pacman -S lm-sensors'
##   
##   
## Modification History:
## 	
##     gabeg Mar 24 2014 <> created
##
## ************************************************************************




## **************************************
## DISPLAY REQUESTED COMPUTER INFORMATION
## **************************************

## Displays the help screen
function helpScreen {
    
    ## Get display screen ready
    local file="$0"
    local first=(`sed 's/^$/  /; s/^/\`/' "$file" | grep -o -E '^\`..'`)
    local j=0
    
    for i in "${first[@]}"; do 
        if [[ "$i" == '`##' || "$i" == '`#!' ]]; then :; else break; fi
        j=$[ $j + 1 ]
    done
    
    
    ## Help Message    
    head -"$j" "$file" 
}



## Show Everything Else!
case "$1" in


## Battery Information
    "bat")
           mainBatFile='/sys/class/power_supply/BAT0'
           
           case "$2" in
               '')  ;;
               
               'stat')
                       chargeStatus=`head -1 "$mainBatFile/status"`
                       echo "$chargeStatus"
                       exit
                       ;;
               *)
                   helpScreen
                   exit
                   ;;
           esac
           
           currentCharge=`head -1 "$mainBatFile/charge_now"`
           fullCharge=`head -1 "$mainBatFile/charge_full"`
           batUsed=`echo "scale=3; $currentCharge / $fullCharge * 100" | bc | sed 's/..$//'`
           
           echo "$batUsed% "
           ;;


## Brightness Settings
 "bright")
           mainBrightDir='/home/gabeg/.config/awesome/other/scripts'
           
           case "$2" in
                'inc') 
                       "$mainBrightDir/bright" inc "$3"
                       ;;
               'dec')
                       "$mainBrightDir/bright" dec "$3"
                       ;;
               'stat')
                       currBright=`"$mainBrightDir/bright" stat`
                       val=`echo "$currBright" | cut -f2 -d':' | sed 's/^ //'`
                       
                       echo "$val"
                       exit
                       ;;
           'stat-val') 
                       currBright=`"$mainBrightDir/bright" stat`
                       val=`echo "$currBright" | cut -f2 -d':' | sed 's/^ //; s/\%//'`
                       
                       echo "$val"
                       exit
                       ;;
               *)
                   helpScreen
                   exit
                   ;;
           esac
           ;;
    
    
## CPU Information        
    "cpu")
           ## Calucalte CPU Info
           ## Might have to change (print 100 - $13) to (print 100 - $12) in Ubuntu 
           ALLcpuUsed=(`mpstat -P ALL | tail -4 | awk ' { print 100 - $13 } '`)
           
           cpu0Used=${ALLcpuUsed[0]}
           cpu1Used=${ALLcpuUsed[1]}
           cpu2Used=${ALLcpuUsed[2]}
           cpu3Used=${ALLcpuUsed[3]}
           
           case "$2" in
               '')
                   ## Display Information
                   echo "CPU 0: $cpu0Used%"
                   echo "CPU 1: $cpu1Used%"
                   echo "CPU 2: $cpu2Used%"
                   echo "CPU 3: $cpu3Used%"
                   ;;
               *)
                   helpScreen
                   exit
                   ;;
           esac
           ;;
    

## Memory Usage Stats
    "mem")
           memTotal=`head -1 /proc/meminfo | awk ' { print $2 } '`
           memFree=`head -2  /proc/meminfo | tail -1 | awk ' { print $2 } '`
           memPer=`echo "scale=2; ( $memTotal - $memFree ) / $memTotal * 100" | bc`
           
           memUsed=`echo "scale=1; ($memTotal - $memFree) / 1000" | bc` 
           memOverall=`echo "scale=0; $memTotal/1000" | bc`

           case "$2" in
               '')
                   echo "Mem: $memUsed Mb / $memOverall Mb"
                   ;;
               *)
                   helpScreen
                   exit
                   ;;
           esac           
           ;;


## Network Connectivity
    "net")
           case "$2" in
               '')
                   wirelessInfo=`tail -1 /proc/net/wireless`
                   link=`echo $wirelessInfo | awk ' { print $3 } '`
                   dbm=`echo $wirelessInfo | awk ' { print $4 } '`
                   
                   sigQuality=`echo "scale=3; ( 100 + $dbm ) / $link * 100.0" | bc | sed 's/.$//'`
                   
                   if (( $(bc <<< "$sigQuality > 1") == 1 )) 2>/dev/null; then
                       echo "$sigQuality% "
                   else
                       echo "Searching... "
                   fi
                   ;;

               'ssid')
                       ssid=`iw dev wlp1s0 link | grep SSID | cut -f2 -d':' | sed 's/^[ \t]*//'`
                       echo "SSID: $ssid"
                       exit
                       ;;
               *)
                   helpScreen
                   exit
                   ;;
           esac
           ;;


## Computer Temperature
   "temp")
           ## Caluclate Computer Temp
           tempUnits='°C'
           allTemp=(`sensors | cut -s -f2 -d'+' | sed 's/°C.*$//'`)
           n="${#allTemp[@]}"
           avgTemp=0.0
           for i in "${allTemp[@]}"; do 
               avgTemp=`echo $avgTemp + $i / $n | bc`
           done
           
           len=`echo $avgTemp | wc -c`
           if [ $len -gt $n ]; then 
               avgTemp=`echo $avgTemp | sed 's/..$//'`
           fi
           
           echo "Temp: $avgTemp$tempUnits"           
           ;;


## Uptime of Computer    
    "up")
          case "$2" in
              '')
                  runTime=`uptime -p | sed 's/^.*up //'`          
                  echo "Uptime: $runTime"
                  ;;
              *)
                  helpScreen
                  exit
                  ;;
          esac
          ;;
    

## Volume Settings
   "vol") 
          
          if [ "$2" -eq "$2" ] 2>/dev/null; then
              if [ "$2" -ge 0 -a "$2" -le 100 ]; then
                  scale=1.149425
                  
                  value=`echo "scale=3; $2/$scale" | bc`
                  rounded=`echo $value/1 | bc`
                  
                  amixer -q cset iface=MIXER,name="Master Playback Volume" "$rounded"
              fi
          fi
          
          
          case "$2" in
          'stat')
                  currVol=`amixer get Master | tail -1 | awk '{print $4}' | sed -e 's/\[//; s/\]//'`
                  echo "$currVol "
                  exit
                  ;;
      'muteStat')
                  currMuteStat=`amixer get Master | tail -1 | awk ' { print $6 } ' | sed 's/\[//; s/\]//'`
                  echo "$currMuteStat"
                  exit
                  ;;
        'unmute')
                  amixer sset Master unmute
                  exit
                  ;;
              
              *)
                  helpScreen
                  exit
                  ;;
          esac          
          ;;
esac
